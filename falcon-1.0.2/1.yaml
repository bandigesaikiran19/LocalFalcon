---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: 2024-03-19T15:36:10Z
  generateName: my-ingress-ingress-nginx-controller-6844689dd-
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: my-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.10.0
    helm.sh/chart: ingress-nginx-4.10.0
    pod-template-hash: 6844689dd
  name: my-ingress-ingress-nginx-controller-6844689dd-h5bgm
  namespace: default
  ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: my-ingress-ingress-nginx-controller-6844689dd
      uid: ff841558-9aef-4b0d-af9b-26f2fee9d1b5
  resourceVersion: "867"
  uid: d0dbae60-bd07-492d-9f26-f687deac932a
spec:
  containers:
    - args:
        - /nginx-ingress-controller
        - --publish-service=$(POD_NAMESPACE)/my-ingress-ingress-nginx-controller
        - --election-id=my-ingress-ingress-nginx-leader
        - --controller-class=k8s.io/ingress-nginx
        - --ingress-class=nginx
        - --configmap=$(POD_NAMESPACE)/my-ingress-ingress-nginx-controller
        - --validating-webhook=:8443
        - --validating-webhook-certificate=/usr/local/certificates/cert
        - --validating-webhook-key=/usr/local/certificates/key
        - --enable-metrics=false
        - --enable-ssl-passthrough
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: LD_PRELOAD
          value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
              - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        - containerPort: 8443
          name: webhook
          protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
            - NET_BIND_SERVICE
          drop:
            - ALL
        readOnlyRootFilesystem: false
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
        - mountPath: /usr/local/certificates/
          name: webhook-cert
          readOnly: true
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access-8h5ks
          readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: k3d-wcbdc-server-0
  nodeSelector:
    kubernetes.io/os: linux
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: my-ingress-ingress-nginx
  serviceAccountName: my-ingress-ingress-nginx
  terminationGracePeriodSeconds: 300
  tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
  volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: my-ingress-ingress-nginx-admission
    - name: kube-api-access-8h5ks
      projected:
        defaultMode: 420
        sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
                - key: ca.crt
                  path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
status:
  conditions:
    - lastProbeTime: null
      lastTransitionTime: 2024-03-19T15:36:10Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2024-03-19T15:36:40Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2024-03-19T15:36:40Z
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: 2024-03-19T15:36:10Z
      status: "True"
      type: PodScheduled
  containerStatuses:
    - containerID: containerd://3e67c0defbf18136c91569533d8b318f39dcccb3833a41513c077824c06443df
      image: sha256:ffcc66479b5baa5a65f94b8b7c73c6ee5ed989ec0b7f8f9371999f335ce4f44c
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: 2024-03-19T15:36:28Z
  hostIP: 179.100.3.2
  phase: Running
  podIP: 10.42.0.10
  podIPs:
    - ip: 10.42.0.10
  qosClass: Burstable
  startTime: 2024-03-19T15:36:10Z
